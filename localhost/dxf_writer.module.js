/**
 * Bundled by jsDelivr using Rollup v2.79.1 and Terser v5.19.2.
 * Original file: /npm/dxf-writer@1.18.4/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
class s{static seed=0;static next(){return(++s.seed).toString(16).toUpperCase()}static peek(){return(s.seed+1).toString(16).toUpperCase()}}var t=s;const e=t;var h=class{constructor(s=null){this.handle=e.next(),this.ownerObjectHandle="0",this.subclassMarkers=[],s&&(Array.isArray(s)?this.subclassMarkers.push(...s):this.subclassMarkers.push(s))}tags(s){s.push(5,this.handle),s.push(330,this.ownerObjectHandle);for(const t of this.subclassMarkers)s.push(100,t)}};const i=h;var a=class extends i{constructor(s,t,e){super(["AcDbSymbolTableRecord","AcDbLinetypeTableRecord"]),this.name=s,this.description=t,this.elements=e}tags(s){s.push(0,"LTYPE"),super.tags(s),s.push(2,this.name),s.push(3,this.description),s.push(70,0),s.push(72,65),s.push(73,this.elements.length),s.push(40,this.getElementsSum()),this.elements.forEach((t=>{s.push(49,t),s.push(74,0)}))}getElementsSum(){return this.elements.reduce(((s,t)=>s+Math.abs(t)),0)}};const r=h;var n=class extends r{constructor(s,t,e=null){super(["AcDbSymbolTableRecord","AcDbLayerTableRecord"]),this.name=s,this.colorNumber=t,this.lineTypeName=e,this.shapes=[],this.trueColor=-1}tags(s){s.push(0,"LAYER"),super.tags(s),s.push(2,this.name),-1!==this.trueColor?s.push(420,this.trueColor):s.push(62,this.colorNumber),s.push(70,0),this.lineTypeName&&s.push(6,this.lineTypeName),s.push(390,1)}setTrueColor(s){this.trueColor=s}addShape(s){this.shapes.push(s),s.layer=this}getShapes(){return this.shapes}shapesTags(s,t){for(const e of this.shapes)e.ownerObjectHandle=s.handle,e.tags(t)}};const c=h;var o=class extends c{constructor(s){super("AcDbSymbolTable"),this.name=s,this.elements=[]}add(s){s.ownerObjectHandle=this.handle,this.elements.push(s)}tags(s){s.push(0,"TABLE"),s.push(2,this.name),super.tags(s),s.push(70,this.elements.length),this.elements.forEach((t=>{t.tags(s)})),s.push(0,"ENDTAB")}};const u=h,p=o;var l=class extends p{constructor(s){super(s),this.subclassMarkers.push("AcDbDimStyleTable")}tags(s){s.push(0,"TABLE"),s.push(2,this.name),u.prototype.tags.call(this,s),s.push(70,this.elements.length),s.push(71,1);for(const t of this.elements)t.tags(s);s.push(0,"ENDTAB")}};const d=h;var y=class extends d{fontFileName="txt";constructor(s){super(["AcDbSymbolTableRecord","AcDbTextStyleTableRecord"]),this.name=s}tags(s){s.push(0,"STYLE"),super.tags(s),s.push(2,this.name),s.push(70,0),s.push(40,0),s.push(41,1),s.push(50,0),s.push(71,0),s.push(42,1),s.push(3,this.fontFileName),s.push(4,"")}};const b=h;var g=class extends b{constructor(s,t){super(["AcDbSymbolTableRecord","AcDbViewportTableRecord"]),this.name=s,this.height=t}tags(s){s.push(0,"VPORT"),super.tags(s),s.push(2,this.name),s.push(40,this.height),s.push(70,0)}};const A=h;var E=class extends A{constructor(s){super(["AcDbSymbolTableRecord","AcDbRegAppTableRecord"]),this.name=s}tags(s){s.push(0,"APPID"),super.tags(s),s.push(2,this.name),s.push(70,0)}};const m=h;var D=class extends m{constructor(s){super(["AcDbEntity","AcDbBlockBegin"]),this.name=s,this.end=new m(["AcDbEntity","AcDbBlockEnd"]),this.recordHandle=null}tags(s){s.push(0,"BLOCK"),super.tags(s),s.push(2,this.name),s.push(70,0),s.point(0,0),s.push(3,this.name),s.push(1,""),s.push(0,"ENDBLK"),this.end.tags(s)}};const x=h;var T=class extends x{constructor(s){super(["AcDbSymbolTableRecord","AcDbBlockTableRecord"]),this.name=s}tags(s){s.push(0,"BLOCK_RECORD"),super.tags(s),s.push(2,this.name),s.push(70,0),s.push(280,0),s.push(281,1)}};const L=h;var S=class extends L{constructor(){super("AcDbDictionary"),this.children={}}addChildDictionary(s,t){t.ownerObjectHandle=this.handle,this.children[s]=t}tags(s){s.push(0,"DICTIONARY"),super.tags(s),s.push(281,1);const t=Object.entries(this.children);for(const e of t){const[t,h]=e;s.push(3,t),s.push(350,h.handle)}const e=Object.values(this.children);for(const t of e)t.tags(s)}};const v=h;var w=class extends v{constructor(s,t,e,h){super(["AcDbEntity","AcDbLine"]),this.x1=s,this.y1=t,this.x2=e,this.y2=h}tags(s){s.push(0,"LINE"),super.tags(s),s.push(8,this.layer.name),s.point(this.x1,this.y1),s.push(11,this.x2),s.push(21,this.y2),s.push(31,0)}};const f=h;var C=class extends f{constructor(s,t,e,h,i,a){super(["AcDbEntity","AcDbLine"]),this.x1=s,this.y1=t,this.z1=e,this.x2=h,this.y2=i,this.z2=a}tags(s){s.push(0,"LINE"),super.tags(s),s.push(8,this.layer.name),s.point(this.x1,this.y1,this.z1),s.push(11,this.x2),s.push(21,this.y2),s.push(31,this.z2)}};const I=h;var N=class extends I{constructor(s,t,e,h,i){super(["AcDbEntity","AcDbCircle"]),this.x=s,this.y=t,this.r=e,this.startAngle=h,this.endAngle=i}tags(s){s.push(0,"ARC"),super.tags(s),s.push(8,this.layer.name),s.point(this.x,this.y),s.push(40,this.r),s.push(100,"AcDbArc"),s.push(50,this.startAngle),s.push(51,this.endAngle)}};const R=h;var O=class extends R{constructor(s,t,e){super(["AcDbEntity","AcDbCircle"]),this.x=s,this.y=t,this.r=e}tags(s){s.push(0,"CIRCLE"),super.tags(s),s.push(8,this.layer.name),s.point(this.x,this.y),s.push(40,this.r)}};const P=h;var M=class extends P{constructor(s,t,e,h,i,a,r,n){super(["AcDbEntity","AcDbCircle"]),this.x=s,this.y=t,this.z=e,this.r=h,this.thickness=i,this.extrusionDirectionX=a,this.extrusionDirectionY=r,this.extrusionDirectionZ=n}tags(s){s.push(0,"CIRCLE"),super.tags(s),s.push(8,this.layer.name),s.point(this.x,this.y,this.z),s.push(40,this.r),s.push(39,this.thickness),s.push(210,this.extrusionDirectionX),s.push(220,this.extrusionDirectionY),s.push(230,this.extrusionDirectionZ)}};const B=h,Y=["left","center","right"],k=["baseline","bottom","middle","top"];var _=class extends B{constructor(s,t,e,h,i,a="left",r="baseline"){super(["AcDbEntity","AcDbText"]),this.x=s,this.y=t,this.height=e,this.rotation=h,this.value=i,this.hAlign=a,this.vAlign=r}tags(s){s.push(0,"TEXT"),super.tags(s),s.push(8,this.layer.name),s.point(this.x,this.y),s.push(40,this.height),s.push(1,this.value),s.push(50,this.rotation),Y.includes(this.hAlign,1)||k.includes(this.vAlign,1)?(s.push(72,Math.max(Y.indexOf(this.hAlign),0)),s.push(11,this.x),s.push(21,this.y),s.push(31,0),s.push(100,"AcDbText"),s.push(73,Math.max(k.indexOf(this.vAlign),0))):s.push(100,"AcDbText")}};const U=h;var j=class extends U{constructor(s,t=!1,e=0,h=0){super(["AcDbEntity","AcDbPolyline"]),this.points=s,this.closed=t,this.startWidth=e,this.endWidth=h}tags(s){s.push(0,"LWPOLYLINE"),super.tags(s),s.push(8,this.layer.name),s.push(6,"ByLayer"),s.push(62,256),s.push(370,-1),s.push(90,this.points.length),s.push(70,this.closed?1:0),this.points.forEach((t=>{const[e,h,i]=t;s.push(10,e),s.push(20,h),0===this.startWidth&&0===this.endWidth||(s.push(40,this.startWidth),s.push(41,this.endWidth)),void 0!==i&&s.push(42,i)}))}};const H=h;const z=h,V=t,W=class extends H{constructor(s,t,e){super(["AcDbEntity","AcDbVertex","AcDb3dPolylineVertex"]),this.x=s,this.y=t,this.z=e}tags(s){s.push(0,"VERTEX"),super.tags(s),s.push(8,this.layer.name),s.point(this.x,this.y,this.z),s.push(70,32)}};var F=class extends z{constructor(s){super(["AcDbEntity","AcDb3dPolyline"]),this.verticies=s.map((s=>{const[t,e,h]=s,i=new W(t,e,h);return i.ownerObjectHandle=this.handle,i})),this.seqendHandle=V.next()}tags(s){s.push(0,"POLYLINE"),super.tags(s),s.push(8,this.layer.name),s.push(66,1),s.push(70,0),s.point(0,0),this.verticies.forEach((t=>{t.layer=this.layer,t.tags(s)})),s.push(0,"SEQEND"),s.push(5,this.seqendHandle),s.push(100,"AcDbEntity"),s.push(8,this.layer.name)}};const $=h;var K=class extends ${constructor(s,t,e,h,i,a,r,n,c,o,u,p){super(["AcDbEntity","AcDbFace"]),this.x1=s,this.y1=t,this.z1=e,this.x2=h,this.y2=i,this.z2=a,this.x3=r,this.y3=n,this.z3=c,this.x4=o,this.y4=u,this.z4=p}tags(s){s.push(0,"3DFACE"),super.tags(s),s.push(8,this.layer.name),s.point(this.x1,this.y1,this.z1),s.push(11,this.x2),s.push(21,this.y2),s.push(31,this.z2),s.push(12,this.x3),s.push(22,this.y3),s.push(32,this.z3),s.push(13,this.x4),s.push(23,this.y4),s.push(33,this.z4)}};const X=h;var G=class extends X{constructor(s,t){super(["AcDbEntity","AcDbPoint"]),this.x=s,this.y=t}tags(s){s.push(0,"POINT"),super.tags(s),s.push(8,this.layer.name),s.point(this.x,this.y)}};const q=h;var Z=class extends q{constructor(s,t=3,e=null,h=null,i=[]){if(super(["AcDbEntity","AcDbSpline"]),s.length<t+1)throw new Error(`For degree ${t} spline, expected at least ${t+1} control points, but received only ${s.length}`);if(null==e){e=[];for(let s=0;s<t+1;s++)e.push(0);for(let h=1;h<s.length-t;h++)e.push(h);for(let h=0;h<t+1;h++)e.push(s.length-t)}if(e.length!==s.length+t+1)throw new Error(`Invalid knot vector length. Expected ${s.length+t+1} but received ${e.length}.`);this.controlPoints=s,this.knots=e,this.fitPoints=i,this.degree=t,this.weights=h;const a=this.weights?1:0;this.type=0+4*a+8+0}tags(s){s.push(0,"SPLINE"),super.tags(s),s.push(8,this.layer.name),s.push(210,0),s.push(220,0),s.push(230,1),s.push(70,this.type),s.push(71,this.degree),s.push(72,this.knots.length),s.push(73,this.controlPoints.length),s.push(74,this.fitPoints.length),s.push(42,1e-7),s.push(43,1e-7),s.push(44,1e-10),this.knots.forEach((t=>{s.push(40,t)})),this.weights&&this.weights.forEach((t=>{s.push(41,t)})),this.controlPoints.forEach((t=>{s.point(t[0],t[1])}))}};const J=h;var Q=class extends J{constructor(s,t,e,h,i,a,r){super(["AcDbEntity","AcDbEllipse"]),this.x=s,this.y=t,this.majorAxisX=e,this.majorAxisY=h,this.axisRatio=i,this.startAngle=a,this.endAngle=r}tags(s){s.push(0,"ELLIPSE"),super.tags(s),s.push(8,this.layer.name),s.point(this.x,this.y),s.push(11,this.majorAxisX),s.push(21,this.majorAxisY),s.push(31,0),s.push(40,this.axisRatio),s.push(41,this.startAngle),s.push(42,this.endAngle)}};const ss=a,ts=n,es=o,hs=l,is=y,as=g,rs=E,ns=D,cs=T,os=S,us=w,ps=C,ls=N,ds=O,ys=M,bs=_,gs=j,As=F,Es=K,ms=G,Ds=Z,xs=Q,Ts=class{constructor(){this.lines=[]}point(s,t,e=0){this.push(10,s),this.push(20,t),this.push(30,e)}start(s){this.push(0,"SECTION"),this.push(2,s)}end(){this.push(0,"ENDSEC")}addHeaderVariable(s,t){this.push(9,`$${s}`),t.forEach((s=>{this.push(s[0],s[1])}))}push(s,t){this.lines.push(s,t)}toDxfString(){return this.lines.join("\n")}},Ls=t;class Ss{constructor(){this.layers={},this.activeLayer=null,this.lineTypes={},this.headers={},this.tables={},this.blocks={},this.dictionary=new os,this.setUnits("Unitless");for(const s of Ss.LINE_TYPES)this.addLineType(s.name,s.description,s.elements);for(const s of Ss.LAYERS)this.addLayer(s.name,s.colorNumber,s.lineTypeName);this.setActiveLayer("0"),this.generateAutocadExtras()}addLineType(s,t,e){return this.lineTypes[s]=new ss(s,t,e),this}addLayer(s,t,e){return this.layers[s]=new ts(s,t,e),this}setActiveLayer(s){return this.activeLayer=this.layers[s],this}addTable(s){const t=new es(s);return this.tables[s]=t,t}addBlock(s){const t=new ns(s);return this.blocks[s]=t,t}drawLine(s,t,e,h){return this.activeLayer.addShape(new us(s,t,e,h)),this}drawLine3d(s,t,e,h,i,a){return this.activeLayer.addShape(new ps(s,t,e,h,i,a)),this}drawPoint(s,t){return this.activeLayer.addShape(new ms(s,t)),this}drawRect(s,t,e,h,i,a){const r=e-s,n=h-t;a=a||0;let c=null;return c=new gs(i?[[s+r-i,t,a],[s+r,t+i],[s+r,t+n-i,a],[s+r-i,t+n],[s+i,t+n,a],[s,t+n-i],[s,t+i,a],[s+i,t]]:[[s,t],[s,t+n],[s+r,t+n],[s+r,t]],!0),this.activeLayer.addShape(c),this}drawPolygon(s,t,e,h,i=0,a=!1){const r=2*Math.PI/e,n=[];let c=h;const o=i*Math.PI/180;a&&(c=h/Math.cos(Math.PI/e));for(let h=0;h<e;h++)n.push([s+c*Math.sin(o+h*r),t+c*Math.cos(o+h*r)]);return this.activeLayer.addShape(new gs(n,!0)),this}drawArc(s,t,e,h,i){return this.activeLayer.addShape(new ls(s,t,e,h,i)),this}drawCircle(s,t,e){return this.activeLayer.addShape(new ds(s,t,e)),this}drawCylinder(s,t,e,h,i,a,r,n){return this.activeLayer.addShape(new ys(s,t,e,h,i,a,r,n)),this}drawText(s,t,e,h,i,a="left",r="baseline"){return this.activeLayer.addShape(new bs(s,t,e,h,i,a,r)),this}drawPolyline(s,t=!1,e=0,h=0){return this.activeLayer.addShape(new gs(s,t,e,h)),this}drawPolyline3d(s){return s.forEach((s=>{if(3!==s.length)throw"Require 3D coordinates"})),this.activeLayer.addShape(new As(s)),this}setTrueColor(s){return this.activeLayer.setTrueColor(s),this}drawSpline(s,t=3,e=null,h=null,i=[]){return this.activeLayer.addShape(new Ds(s,t,e,h,i)),this}drawEllipse(s,t,e,h,i,a=0,r=2*Math.PI){return this.activeLayer.addShape(new xs(s,t,e,h,i,a,r)),this}drawFace(s,t,e,h,i,a,r,n,c,o,u,p){return this.activeLayer.addShape(new Es(s,t,e,h,i,a,r,n,c,o,u,p)),this}_ltypeTable(){const s=new es("LTYPE"),t=Object.values(this.lineTypes);for(const e of t)s.add(e);return s}_layerTable(s){const t=new es("LAYER"),e=Object.values(this.layers);for(const s of e)t.add(s);return t}header(s,t){return this.headers[s]=t,this}setUnits(s){return void 0!==Ss.UNITS[s]?Ss.UNITS[s]:Ss.UNITS.Unitless,this.header("INSUNITS",[[70,Ss.UNITS[s]]]),this}generateAutocadExtras(){this.headers.ACADVER||this.header("ACADVER",[[1,"AC1021"]]),this.lineTypes.ByBlock||this.addLineType("ByBlock","",[]),this.lineTypes.ByLayer||this.addLineType("ByLayer","",[]);let s=this.tables.VPORT;s||(s=this.addTable("VPORT"));let t=this.tables.STYLE;t||(t=this.addTable("STYLE")),this.tables.VIEW||this.addTable("VIEW"),this.tables.UCS||this.addTable("UCS");let e=this.tables.APPID;if(e||(e=this.addTable("APPID")),!this.tables.DIMSTYLE){const s=new hs("DIMSTYLE");this.tables.DIMSTYLE=s}s.add(new as("*ACTIVE",1e3)),t.add(new is("standard")),e.add(new rs("ACAD")),this.modelSpace=this.addBlock("*Model_Space"),this.addBlock("*Paper_Space");const h=new os;this.dictionary.addChildDictionary("ACAD_GROUP",h)}_tagsManager(){const s=new Ts,t=new es("BLOCK_RECORD"),e=Object.values(this.blocks);for(const s of e){const e=new cs(s.name);t.add(e)}const h=this._ltypeTable(),i=this._layerTable();s.start("HEADER"),s.addHeaderVariable("HANDSEED",[[5,Ls.peek()]]);const a=Object.entries(this.headers);for(const t of a){const[e,h]=t;s.addHeaderVariable(e,h)}s.end(),s.start("CLASSES"),s.end(),s.start("TABLES"),h.tags(s),i.tags(s);const r=Object.values(this.tables);for(const t of r)t.tags(s);t.tags(s),s.end(),s.start("BLOCKS");for(const t of e)t.tags(s);s.end(),s.start("ENTITIES");const n=Object.values(this.layers);for(const t of n)t.shapesTags(this.modelSpace,s);return s.end(),s.start("OBJECTS"),this.dictionary.tags(s),s.end(),s.push(0,"EOF"),s}toDxfString(){return this._tagsManager().toDxfString()}}Ss.ACI={LAYER:0,RED:1,YELLOW:2,GREEN:3,CYAN:4,BLUE:5,MAGENTA:6,WHITE:7},Ss.LINE_TYPES=[{name:"CONTINUOUS",description:"______",elements:[]},{name:"DASHED",description:"_ _ _ ",elements:[5,-5]},{name:"DOTTED",description:". . . ",elements:[0,-5]}],Ss.LAYERS=[{name:"0",colorNumber:Ss.ACI.WHITE,lineTypeName:"CONTINUOUS"}],Ss.UNITS={Unitless:0,Inches:1,Feet:2,Miles:3,Millimeters:4,Centimeters:5,Meters:6,Kilometers:7,Microinches:8,Mils:9,Yards:10,Angstroms:11,Nanometers:12,Microns:13,Decimeters:14,Decameters:15,Hectometers:16,Gigameters:17,"Astronomical units":18,"Light years":19,Parsecs:20};var vs=Ss;export{vs as default};
//# sourceMappingURL=/sm/64a46b5e1cd4280ff9a5be01c316712a36782666f6cd8f231aa84870c79c30a9.map